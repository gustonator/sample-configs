---
- hosts: loadbalancer
  become: true
  tasks:
    - name: verify nginx service
      command: service nginx status

    - name: verify nginx is listening on 80
      wait_for: port=80 timeout=1

- hosts: application
  become: true
  tasks:
    - name: verify apache2 service
      command: service apache2 status

    - name: verify apache2 is listening on 80
      wait_for: port=80 timeout=1

- hosts: database
  become: true
  tasks:
    - name: verify mysql service
      command: service mysql status

    - name: verify mysql is listening on 3306
      wait_for: host={{ ansible_eth1.ipv4.address }} port=3306 timeout=1


- hosts: control
  tasks:
    - name: verify End-to-end index response
      uri:
        url: http://{{ item }}
        return_content: yes
      with_items:
         - "{{ groups['loadbalancer'] }}"
      register: lb_index

    - name: "fail if there is missing content"
      fail:
        msg: "Index failed to return content"
      when: "'Hello, from sunny' not in item.content"
      with_items: "{{ lb_index.results }}"

    - name: verify End-to-end DB response
      uri:
        url: http://{{ item }}/db
        return_content: yes
      with_items:
         - "{{ groups['loadbalancer'] }}"
      register: lb_db

    - name: "fail if there is missing content"
      fail:
        msg: "DB failed to return content"
      when: "'Database Connected from' not in item.content"
      with_items: "{{ lb_db.results }}"




- hosts: loadbalancer
  tasks:
    - name: verify backend index response
      uri:
        url: http://{{ item }}
        return_content: yes
      with_items:
         - "{{ groups['application'] }}"
      register: app_index

    - name: "fail if there is missing content"
      fail:
        msg: "Index failed to return content"
      when: "'Hello, from sunny' not in item.content"
      with_items: "{{ app_index.results }}"

    - name: verify backend DB response
      uri:
        url: http://{{ item }}/db
        return_content: yes
      with_items:
         - "{{ groups['application'] }}"
      register: app_db

    - name: "fail if there is missing content"
      fail:
        msg: "DB failed to return content"
      when: "'Database Connected from' not in item.content"
      with_items: "{{ app_db.results }}"

